name: Deploy Customers, Vets & Visits Services

env:

  # ==== Versions ====
  
  DEPLOYMENT_VERSION: 2.6.13
  AZ_CLI_VERSION: 2.45.0
  JAVA_VERSION: 11
  WI_VERSION: 0.15.0 # Azure AD Workload Identity version: https://github.com/Azure/azure-workload-identity/releases


  # ==== General settings  ====

  APP_NAME: petcliaks
  LOCATION: westeurope # francecentral
  RG_KV: rg-iac-kv33 # RG where to deploy KV
  RG_APP: rg-iac-aks-petclinic-mic-srv # RG where to deploy the other Azure services: AKS, ACR, MySQL, etc.
  
  DEPLOY_TO_VNET: false

  KV_NAME: kv-petcliaks33 # The name of the KV, must be UNIQUE. A vault name must be between 3-24 alphanumeric characters
  SET_KV_ACCESS_POLICIES: false # let it to false
  SPRING_CLOUD_AZURE_KEY_VAULT_ENDPOINT: https://kv-petcliaks33.vault.azure.net/
  
  # AAD WI
  SECRET_PROVIDER_CUSTOMERS: azure-kv-wi-customers
  SECRET_PROVIDER_VETS: azure-kv-wi-vets
  SECRET_PROVIDER_VISITS: azure-kv-wi-visits

  DNS_ZONE: cloudapp.azure.com
  APP_DNS_ZONE: petclinic.westeurope.cloudapp.azure.com
  CUSTOM_DNS: javaonazurehandsonlabs.com
  AZURE_DNS_LABEL_NAME: petclinic
  
  PETCLINIC_NAMESPACE: petclinic
  AKS_CLUSTER_NAME: aks-petcliaks
  AZURE_CONTAINER_REGISTRY: acrpetcliaks # The name of the ACR, must be UNIQUE. The name must contain only alphanumeric characters, be globally unique, and between 5 and 50 characters in length.
  REGISTRY_URL: acrpetcliaks.azurecr.io  # set this to the URL of your registry
  REPOSITORY: petclinic                  # set this to your ACR repository

  # ==== Azure storage to store Artifacts , values must be consistent with the ones in storage.bicep ====:
  AZ_STORAGE_NAME : stakspetcliaks # customize this
  AZ_BLOB_CONTAINER_NAME: petcliaks-blob # customize this
  # AZ_BLOB_SVC_NAME: default # MUST NOT BE MODIFIED
  # https://stakspetcliaks.blob.core.windows.net/petcliaks-blob/spring-petclinic-vets-service-2.6.13.jar

  # https://learn.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-blob-service-operations
  AZ_BLOB_MAX_CONNECTIONS: 5
  AZ_BLOB_MAXSIZE_CONDITION: 104857600
  AZ_BLOB_TIMEOUT: 600
  
  # ==== APPS ====

  CLOUD_PROVIDER_ENV: azure
  PRJ_PREFIX: spring-petclinic

  API_GATEWAY: api-gateway
  ADMIN_SERVER: admin-server
  CUSTOMERS_SERVICE: customers-service
  VETS_SERVICE: vets-service
  VISITS_SERVICE: visits-service

  CONFIG_SERVER: config-server
  DISCOVERY_SERVER: discovery-server

  # ==== Secrets ====

  credentials: ${{ secrets.AZURE_CREDENTIALS }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  SPRING_CLOUD_AZURE_TENANT_ID: ${{ secrets.SPRING_CLOUD_AZURE_TENANT_ID }}

on:
  workflow_call:
    inputs: # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onworkflow_callinputs
      tag_id:
        description: the Image Tag ID
        required: true
        type: string  
  workflow_dispatch:
    inputs: # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onworkflow_dispatchinputs
      tag_id:
        description: the Image Tag ID
        required: true
        type: string

jobs:
  deploy-services:
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Azure Login
      uses: azure/login@v1 # https://github.com/marketplace/actions/azure-login
      with:
        creds: ${{ env.credentials }}

    # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#environment-files
    # /!\ IMPORTANT:  The step that creates or updates the environment variable does not have access to the new value, but all subsequent steps in a job will have access.
    - name: Set Base environment variables
      run: |
        
        az version
        echo "ADMIN_SERVER_FOLDER=${{ env.PRJ_PREFIX }}-${{ env.ADMIN_SERVER }}" >> $GITHUB_ENV
        echo "DISCOVERY_SERVER_FOLDER=${{ env.PRJ_PREFIX }}-${{ env.DISCOVERY_SERVER }}" >> $GITHUB_ENV

        echo "API_GATEWAY_FOLDER=${{ env.PRJ_PREFIX }}-${{ env.API_GATEWAY }}" >> $GITHUB_ENV
        echo "CONFIG_SERVER_FOLDER=${{ env.PRJ_PREFIX }}-${{ env.CONFIG_SERVER }}" >> $GITHUB_ENV
        echo "CUSTOMERS_SERVICE_FOLDER=${{ env.PRJ_PREFIX }}-${{ env.CUSTOMERS_SERVICE }}" >> $GITHUB_ENV
        echo "VETS_SERVICE_FOLDER=${{ env.PRJ_PREFIX }}-${{ env.VETS_SERVICE }}" >> $GITHUB_ENV
        echo "VISITS_SERVICE_FOLDER=${{ env.PRJ_PREFIX }}-${{ env.VISITS_SERVICE }}" >> $GITHUB_ENV

        echo "GH_WORKSPACE=${{ github.workspace }}" >> $GITHUB_ENV # "/github/workspace"

        KV_NAME=$(az deployment group show --name aks-petclinic-kv -g ${{ env.RG_KV }} --query properties.outputs.keyVaultName.value -o tsv)
        echo "KV_NAME=$KV_NAME" >> $GITHUB_ENV 
        echo "KV_NAME=$KV_NAME"

        REGISTRY_URL=$(az deployment group show --name acr -g ${{ env.RG_APP }} --query properties.outputs.acrRegistryUrl.value -o tsv)
        echo "REGISTRY_URL="$REGISTRY_URL
        echo "REGISTRY_URL="$REGISTRY_URL >> $GITHUB_ENV

        AKS_CLUSTER_NAME=$(az deployment group show --name aks -g ${{ env.RG_APP }} --query properties.outputs.aksClusterName.value -o tsv)
        echo "AKS_CLUSTER_NAME="$AKS_CLUSTER_NAME
        echo "AKS_CLUSTER_NAME="$AKS_CLUSTER_NAME >> $GITHUB_ENV

        managed_rg=$(az aks show --resource-group ${{ env.RG_APP }} --name $AKS_CLUSTER_NAME --query nodeResourceGroup -o tsv)
        echo "CLUSTER_RESOURCE_GROUP:" $managed_rg
        echo "managed_rg=$managed_rg" >> $GITHUB_ENV

        echo "LOCAL_IP=$(curl whatismyip.akamai.com)" >> $GITHUB_ENV


      shell: bash

    - name: Display environment variables
      run: |

        echo "Checking GITHUB_ENV"
        echo "LOCAL_IP=$LOCAL_IP"
        
        echo "ADMIN_SERVER_FOLDER=$ADMIN_SERVER_FOLDER"
        echo "DISCOVERY_SERVER_FOLDER=$DISCOVERY_SERVER_FOLDER"

        echo "API_GATEWAY_FOLDER=$API_GATEWAY_FOLDER"
        echo "CONFIG_SERVER_FOLDER=$CONFIG_SERVER_FOLDER"
        echo "CUSTOMERS_SERVICE_FOLDER=$CUSTOMERS_SERVICE_FOLDER"
        echo "VETS_SERVICE_FOLDER=$VETS_SERVICE_FOLDER"
        echo "VISITS_SERVICE_FOLDER=$VISITS_SERVICE_FOLDER"

        echo "KV_NAME=$KV_NAME"
        echo "REGISTRY_URL="$REGISTRY_URL
        echo "AKS_CLUSTER_NAME=$AKS_CLUSTER_NAME"
        echo "managed_rg="$managed_rg

        echo "GH_WORKSPACE=$GH_WORKSPACE"
      shell: bash


    # https://github.com/Azure/aks-set-context/tree/releases/v1
    - name: AKS Set Context
      uses: azure/aks-set-context@v1
      with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}' # Azure credentials
          resource-group: ${{ env.RG_APP }} 
          cluster-name: ${{ env.AKS_CLUSTER_NAME }}
      id: akslogin

    # https://github.com/marketplace/actions/helm-tool-installer

    - name: Get Apps Identity Id
      run: |

          # vetsServicePrincipalId=$(az deployment group show --name aks-identities -g ${{ env.RG_APP }} --query properties.outputs.vetsServicePrincipalId.value)
          vetsServiceClientId=$(az deployment group show --name aks-identities -g ${{ env.RG_APP }} --query properties.outputs.vetsServiceClientId.value)

          # visitsServicePrincipalId=$(az deployment group show --name aks-identities -g ${{ env.RG_APP }} --query properties.outputs.visitsServicePrincipalId.value)
          visitsServiceClientId=$(az deployment group show --name aks-identities -g ${{ env.RG_APP }} --query properties.outputs.visitsServiceClientId.value)

          # customersServicePrincipalId=$(az deployment group show --name aks-identities -g ${{ env.RG_APP }} --query properties.outputs.customersServicePrincipalId.value)
          customersServiceClientId=$(az deployment group show --name aks-identities -g ${{ env.RG_APP }} --query properties.outputs.customersServiceClientId.value)

          echo "vetsServiceClientId=$vetsServiceClientId" >> $GITHUB_ENV
          echo "visitsServiceClientId=$visitsServiceClientId" >> $GITHUB_ENV
          echo "customersServiceClientId=$customersServiceClientId" >> $GITHUB_ENV

    - name: Prepare Manifests to deploy Customers, Vets & Visits services to AKS
      # with: # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepswith
      run: |

          echo "About to deploy the Config-Server, Customers, Vets & Visits services ..." 
          tag_id=${{ inputs.tag_id }}
          echo "Image Build tag ID:"$tag_id

          imageNameConfigServer="${{ env.REGISTRY_URL }}/${{ env.REPOSITORY }}/${{ env.CONFIG_SERVER }}:$tag_id"

          imageNameCustomersService="${{ env.REGISTRY_URL }}/${{ env.REPOSITORY }}/${{ env.CUSTOMERS_SERVICE }}:$tag_id"
          imageNameVetsService="${{ env.REGISTRY_URL }}/${{ env.REPOSITORY }}/${{ env.VETS_SERVICE }}:$tag_id"
          imageNameVisitsService="${{ env.REGISTRY_URL }}/${{ env.REPOSITORY }}/${{ env.VISITS_SERVICE }}:$tag_id"

          echo "imageNameConfigServer="$imageNameConfigServer
          echo "imageNameCustomersService="$imageNameCustomersService
          echo "imageNameVetsService="$imageNameVetsService
          echo "imageNameVisitsService="$imageNameVisitsService

          managed_rg=$(az aks show --resource-group ${{ env.RG_APP }} --name ${{ env.AKS_CLUSTER_NAME }} --query nodeResourceGroup -o tsv)
          echo "CLUSTER_RESOURCE_GROUP:" $managed_rg

          # az aks get-credentials --name ${{ env.AKS_CLUSTER_NAME }} -g ${{ env.RG_APP }} --admin

          export CONTAINER_REGISTRY=${{ env.AZURE_CONTAINER_REGISTRY }}
          export REPO=${{ env.REPOSITORY }} 
          export IMAGE_TAG=$tag_id
          export DNS_LABEL=${{ env.AZURE_DNS_LABEL_NAME }}

          export ING_HOST=${{ env.APP_DNS_ZONE }}
          echo "INGRESS HOST " $ING_HOST

          # AAD WI
          export AAD_WI_VERSION=${{ env.WI_VERSION }}
          echo "AAD_WI_VERSION " $AAD_WI_VERSION          
          export KEYVAULT_NAME=${{ env.KV_NAME }}
          export IDENTITY_TENANT=${{ env.SPRING_CLOUD_AZURE_TENANT_ID }}

          mkdir $CUSTOMERS_SERVICE_FOLDER/k8s/deploy
          mkdir $VETS_SERVICE_FOLDER/k8s/deploy
          mkdir $VISITS_SERVICE_FOLDER/k8s/deploy

          echo "Cheking folder " $CUSTOMERS_SERVICE_FOLDER
          ls -al $CUSTOMERS_SERVICE_FOLDER/k8s

          echo "Cheking folder " $VETS_SERVICE_FOLDER
          ls -al $VETS_SERVICE_FOLDER/k8s

          echo "Cheking folder " $VISITS_SERVICE_FOLDER
          ls -al $VISITS_SERVICE_FOLDER/k8s

          export SECRET_PROVIDER_CLASS_NAME=${{ env.SECRET_PROVIDER_CUSTOMERS }}
          echo "SECRET_PROVIDER_CLASS_NAME " $SECRET_PROVIDER_CLASS_NAME
          export USER_ASSIGNED_CLIENT_ID=$customersServiceClientId
          envsubst < $CUSTOMERS_SERVICE_FOLDER/k8s/secret-provider-class.yaml > $CUSTOMERS_SERVICE_FOLDER/k8s/deploy/secret-provider-class.yaml 
          kubectl apply -f $CUSTOMERS_SERVICE_FOLDER/k8s/deploy/secret-provider-class.yaml -n ${{ env.PETCLINIC_NAMESPACE }}

          envsubst < $CUSTOMERS_SERVICE_FOLDER/k8s/petclinic-customer-deployment.yaml > $CUSTOMERS_SERVICE_FOLDER/k8s/deploy/petclinic-customer-deployment.yaml
          envsubst < $CUSTOMERS_SERVICE_FOLDER/k8s/petclinic-customer-ingress.yaml > $CUSTOMERS_SERVICE_FOLDER/k8s/deploy/petclinic-customer-ingress.yaml 
          envsubst < $CUSTOMERS_SERVICE_FOLDER/k8s/petclinic-customer-srv-cluster-ip.yaml > $CUSTOMERS_SERVICE_FOLDER/k8s/deploy/petclinic-customer-srv-cluster-ip.yaml 

          SECRET_PROVIDER_CLASS_NAME=${{ env.SECRET_PROVIDER_VETS }}
          export SECRET_PROVIDER_CLASS_NAME
          echo "SECRET_PROVIDER_CLASS_NAME " $SECRET_PROVIDER_CLASS_NAME
          export USER_ASSIGNED_CLIENT_ID=$vetsServiceClientId
          envsubst < $VETS_SERVICE_FOLDER/k8s/secret-provider-class.yaml > $VETS_SERVICE_FOLDER/k8s/deploy/secret-provider-class.yaml 
          kubectl apply -f $VETS_SERVICE_FOLDER/k8s/deploy/secret-provider-class.yaml -n ${{ env.PETCLINIC_NAMESPACE }}

          envsubst < $VETS_SERVICE_FOLDER/k8s/petclinic-vet-deployment.yaml > $VETS_SERVICE_FOLDER/k8s/deploy/petclinic-vet-deployment.yaml
          envsubst < $VETS_SERVICE_FOLDER/k8s/petclinic-vet-ingress.yaml > $VETS_SERVICE_FOLDER/k8s/deploy/petclinic-vet-ingress.yaml 
          envsubst < $VETS_SERVICE_FOLDER/k8s/petclinic-vet-srv-cluster-ip.yaml > $VETS_SERVICE_FOLDER/k8s/deploy/petclinic-vet-srv-cluster-ip.yaml 

          SECRET_PROVIDER_CLASS_NAME=${{ env.SECRET_PROVIDER_VISITS }}
          export SECRET_PROVIDER_CLASS_NAME
          echo "SECRET_PROVIDER_CLASS_NAME " $SECRET_PROVIDER_CLASS_NAME
          export USER_ASSIGNED_CLIENT_ID=$visitsServiceClientId
          envsubst < $VISITS_SERVICE_FOLDER/k8s/secret-provider-class.yaml > $VISITS_SERVICE_FOLDER/k8s/deploy/secret-provider-class.yaml 
          kubectl apply -f $VISITS_SERVICE_FOLDER/k8s/deploy/secret-provider-class.yaml -n ${{ env.PETCLINIC_NAMESPACE }}

          envsubst < $VISITS_SERVICE_FOLDER/k8s/petclinic-visits-deployment.yaml > $VISITS_SERVICE_FOLDER/k8s/deploy/petclinic-visits-deployment.yaml
          envsubst < $VISITS_SERVICE_FOLDER/k8s/petclinic-visits-ingress.yaml > $VISITS_SERVICE_FOLDER/k8s/deploy/petclinic-visits-ingress.yaml 
          envsubst < $VISITS_SERVICE_FOLDER/k8s/petclinic-visits-srv-cluster-ip.yaml > $VISITS_SERVICE_FOLDER/k8s/deploy/petclinic-visits-srv-cluster-ip.yaml 

          echo "Cheking folder " $CUSTOMERS_SERVICE_FOLDER
          ls -al $CUSTOMERS_SERVICE_FOLDER/k8s/deploy
          cat $CUSTOMERS_SERVICE_FOLDER/k8s/deploy/secret-provider-class.yaml 
          
          echo "Cheking folder " $VETS_SERVICE_FOLDER
          ls -al $VETS_SERVICE_FOLDER/k8s/deploy
          cat $VETS_SERVICE_FOLDER/k8s/deploy/secret-provider-class.yaml 

          echo "Cheking folder " $VISITS_SERVICE_FOLDER
          ls -al $VISITS_SERVICE_FOLDER/k8s/deploy
          cat $VISITS_SERVICE_FOLDER/k8s/deploy/secret-provider-class.yaml 
          
          set -euo pipefail
          access_token=$(az account get-access-token --query accessToken -o tsv)
          refresh_token=$(curl https://${{ env.REGISTRY_URL }}/oauth2/exchange -v -d "grant_type=access_token&service=${{ env.REGISTRY_URL }}&access_token=$access_token" | jq -r .refresh_token)
          docker login ${{ env.REGISTRY_URL }} -u 00000000-0000-0000-0000-000000000000 --password-stdin <<< "$refresh_token"

          az configure --defaults acr=${{ env.AZURE_CONTAINER_REGISTRY }}

      shell: bash


      # https://github.com/marketplace/actions/deploy-to-kubernetes-cluster#build-container-image-and-deploy-to-any-azure-kubernetes-service-cluster
            # https://github.com/Azure/k8s-deploy/issues/278
            # $CONFIG_SERVER_FOLDER/k8s/deploy
            # $VETS_SERVICE_FOLDER/k8s/deploy
            # $CUSTOMERS_SERVICE_FOLDER/k8s/deploy
            # $VISITS_SERVICE_FOLDER/k8s/deploy
            # $API_GATEWAY_FOLDER/k8s/deploy
    - name: Deploy Manifests to AKS
      uses: Azure/k8s-deploy@v4
      with:
        namespace: ${{ env.PETCLINIC_NAMESPACE }}
        manifests: |
            spring-petclinic-vets-service/k8s/deploy
            spring-petclinic-customers-service/k8s/deploy
            spring-petclinic-visits-service/k8s/deploy

    - name: Verify SecretProviderClass and Ingress
      run: |
            kubectl get SecretProviderClass -n  ${{ env.PETCLINIC_NAMESPACE }}
            kubectl get ingress -n ${{ env.PETCLINIC_NAMESPACE }}
      shell: bash

    # security hardening for self-hosted agents: https://github.com/marketplace/actions/azure-login
    # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#hardening-for-self-hosted-runners
    # if the runner is self-hosted which is not github provided it is recommended to manually logout at the end of the workflow as shown below.
    - name: Azure Logout security hardening
      run: |
          az logout
          az cache purge
          az account clear
      shell: bash