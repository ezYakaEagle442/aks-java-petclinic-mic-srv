# This workflow will deploy the Azure services pre-req, including KV & secrets, MYSQL (eventually with a Firewall rule to allow your workstation IP)
# eventually if DEPLOY_TO_VNET is set to true : also VNet, private DNS-Zone, client VM deployed to the VNet

name: Deploy IaC Pre-Req with Azure Bicep

env:
  APP_NAME: petcliaks
  LOCATION: westeurope # francecentral
  RG_KV: rg-iac-kv33 # RG where to deploy KV
  RG_APP: rg-iac-aks-petclinic-mic-srv # RG where to deploy the other Azure services: AKS, ACR, MySQL, etc.
  
  ACR_NAME: acrpetcliaks

  VNET_NAME: vnet-aks
  VNET_CIDR: 172.16.0.0/16
  AKS_SUBNET_CIDR: 172.16.1.0/24
  AKS_SUBNET_NAME: snet-aks

  START_IP_ADRESS: 172.16.1.0
  END_IP_ADRESS: 172.16.1.255

  DNS_ZONE: cloudapp.azure.com
  APP_DNS_ZONE: kissmyapp.westeurope.cloudapp.azure.com

  MYSQL_SERVER_NAME: petcliaks
  MYSQL_DB_NAME: petclinic
  MYSQL_ADM_USR: mys_adm
  MYSQL_TIME_ZONE: Europe/Paris
  MYSQL_CHARACTER_SET: utf8
  MYSQL_PORT: 3306

  DEPLOY_TO_VNET: false

  KV_NAME: kv-petcliaks33 # The name of the KV, must be UNIQUE. A vault name must be between 3-24 alphanumeric characters
  SET_KV_ACCESS_POLICIES: false # let it to false

  SPN_APP_NAME: gha_aks_run # A Service Principal required for GitHub Action Runner

  VM_ADMIN_USER_NAME: adm_aks

  # ==== Secrets ====
  # /!\ In Bicep : RBAC ==> GH Runner SPN must have "Storage Blob Data Contributor" Role on the storage Account"
  # /!\ The SPN Id is NOT the App Registration Object ID, but the Enterprise Registration Object ID"
  SPN_ID: ${{ secrets.SPN_ID }} # A Service Principal required for GitHub Action Runner

  # https://github.com/Azure/actions-workflow-samples/blob/master/assets/create-secrets-for-GitHub-workflows.md#consume-secrets-in-your-workflow
  # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-using-secrets

  # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions
  # Never use structured data as a secret
  # Structured data can cause secret redaction within logs to fail, because redaction largely relies on finding an exact match for 
  # the specific secret value. For example, do not use a blob of JSON, XML, or YAML (or similar) to encapsulate a secret value, 
  # as this significantly reduces the probability the secrets will be properly redacted. Instead, create individual secrets for each sensitive value.

  SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
  SPRING_CLOUD_AZURE_KEY_VAULT_ENDPOINT: ${{ secrets.SPRING_CLOUD_AZURE_KEY_VAULT_ENDPOINT }}
  SPRING_CLOUD_AZURE_TENANT_ID: ${{ secrets.SPRING_CLOUD_AZURE_TENANT_ID }}

  VM_ADMIN_PASSWORD: ${{ secrets.VM_ADMIN_PASSWORD }}

  SSH_PRV_KEY: ${{ secrets.SSH_PRV_KEY }}
  SSH_PUB_KEY: ${{ secrets.SSH_PUB_KEY }}
  SSH_KEY: aksadm

  # https://learn.microsoft.com/en-us/azure/key-vault/secrets/secrets-best-practices#secrets-rotation
  # Because secrets are sensitive to leakage or exposure, it's important to rotate them often, at least every 60 days. 
  # Expiry date in seconds since 1970-01-01T00:00:00Z. Ex: 1672444800 ==> 31/12/2022'
  SECRET_EXPIRY_DATE: 1703980800 # ==> 31/12/2023

  credentials: ${{ secrets.AZURE_CREDENTIALS }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  # ==== Versions ====
  DEPLOYMENT_VERSION: 2.6.13
  AZ_CLI_VERSION: 2.42.0
  JAVA_VERSION: 11

on:
  workflow_dispatch:
  workflow_call:

jobs:
  deploy-kv:
    runs-on: ubuntu-latest
    steps:

    # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#environment-files
    # /!\ IMPORTANT: The step that creates or updates the environment variable does not have access to the new value, but all subsequent steps in a job will have access.
    - name: Set Base environment variables
      run: |
        echo "LOCAL_IP=$(curl whatismyip.akamai.com)" >> $GITHUB_ENV     
      shell: bash

    - name: Login with GHA Runner SP
      uses: azure/login@v1.4.6 # fails https://github.com/marketplace/actions/azure-login
      with:
        creds: ${{ env.credentials }} # ${{ secrets.AZURE_CREDENTIALS }}

    - name: Checkout
      uses: actions/checkout@v3 # https://github.com/actions/checkout

    - name: Deploy Azure Key Vault      
      # uses: azure/CLI@v1.0.6 # https://github.com/marketplace/actions/azure-cli-action
      # with:
        #azcliversion: ${{ env.AZ_CLI_VERSION }}
        # inlineScript: |
      shell: bash
      run: |
          pwd
          ls -al
          
          az deployment group create --name aks-petclinic-kv -f iac/bicep/modules/kv/kv.bicep -g ${{ env.RG_KV }} \
            -p appName=${{ env.APP_NAME }} \
            -p kvName=${{ env.KV_NAME }} \
            -p location=${{ env.LOCATION }}

    # Allow GH Runner to access KV
    # When Public access is disabled on KV, you need to add a network rule in the KV Firewall
    - name: Authorize local IP to access the Azure Key Vault
      run: |
          az keyvault network-rule add --ip-address $LOCAL_IP --name ${{ env.KV_NAME }} --only-show-errors
          sleep 30
      shell: bash

    - name: Create SPRING-DATASOURCE-PASSWORD secret in Azure Key Vault
      run: |
          az deployment group create --name aks-petclinic-kv-db-pwd -f iac/bicep/modules/kv/kv_sec_key.bicep -g ${{ env.RG_KV }} \
            -p appName=${{ env.APP_NAME }} \
            -p kvName=${{ env.KV_NAME }} \
            -p secretName="SPRING-DATASOURCE-PASSWORD" \
            -p secretValue=${{ secrets.SPRING_DATASOURCE_PASSWORD }} \
            -p secretExpiryDate=${{ env.SECRET_EXPIRY_DATE }}
      shell: bash

    - name: Create SPRING-CLOUD-AZURE-TENANT-ID secret in Azure Key Vault
      run: |
          az deployment group create --name aks-petclinic-kv-tenant -f iac/bicep/modules/kv/kv_sec_key.bicep -g ${{ env.RG_KV }} \
            -p appName=${{ env.APP_NAME }} \
            -p kvName=${{ env.KV_NAME }} \
            -p secretName="SPRING-CLOUD-AZURE-TENANT-ID" \
            -p secretValue=${{ secrets.SPRING_CLOUD_AZURE_TENANT_ID }} \
            -p secretExpiryDate=${{ env.SECRET_EXPIRY_DATE }} 
      shell: bash

    - name: Create VM-ADMIN-PASSWORD secret in Azure Key Vault
      run: |
          az deployment group create --name aks-petclinic-kv-vm-pwd -f iac/bicep/modules/kv/kv_sec_key.bicep -g ${{ env.RG_KV }} \
            -p appName=${{ env.APP_NAME }} \
            -p kvName=${{ env.KV_NAME }} \
            -p secretName="VM-ADMIN-PASSWORD" \
            -p secretValue=${{ secrets.VM_ADMIN_PASSWORD }} \
            -p secretExpiryDate=${{ env.SECRET_EXPIRY_DATE }}
      shell: bash

    - name: Create SSH-PRV-KEY secret in Azure Key Vault
      run: |
          # ERROR: Unable to parse parameter: OPENSSH
          # woraround using --file: az keyvault secret set --name "SSH-PRV-KEY" --vault-name ${{ env.KV_NAME }} --file .\private.key
          cat ${{ secrets.SSH_PRV_KEY }} > ${{ env.SSH_KEY }} 
          az keyvault secret set --name "SSH-PRV-KEY" --vault-name ${{ env.KV_NAME }} --file .\${{ env.SSH_KEY }}
      shell: bash

    - name: Create SSH-PUB-KEY secret in Azure Key Vault
      run: |
          cat ${{ secrets.SSH_PUB_KEY }} > ${{ env.SSH_KEY }}.pub
          az keyvault secret set --name "SSH-PUB-KEY" --vault-name ${{ env.KV_NAME }} --file .\${{ env.SSH_KEY }}.pub
      shell: bash

    - name: Disable local IP access to the Key Vault
      if: ${{ always() }}
      run: |
          az keyvault network-rule remove --ip-address $LOCAL_IP --name ${{ env.KV_NAME }} --only-show-errors
      shell: bash

  deploy-iac:
    runs-on: ubuntu-latest
    needs: deploy-kv
    steps:

    - name: Set Base environment variables
      run: |
        echo "LOCAL_IP=$(curl whatismyip.akamai.com)" >> $GITHUB_ENV     
      shell: bash

    - name: Login with GHA Runner SP
      uses: azure/login@v1.4.6 # fails https://github.com/marketplace/actions/azure-login
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }} # ${{ env.credentials }}
        
    - name: Checkout
      uses: actions/checkout@v3 # https://github.com/actions/checkout

    - name: Deploy the pre-req
      run: |
          # --debug # --what-if to test like a dry-run
          
          az deployment group create --name aks-petclinic-pre-req -f iac/bicep/pre-req.bicep -g ${{ env.RG_APP }} \
            -p appName=${{ env.APP_NAME }} \
            -p location=${{ env.LOCATION }} \
            -p kvName=${{ env.KV_NAME }} \
            -p kvRGName=${{ env.RG_KV }} \
            -p ghRunnerSpnPrincipalId=${{ env.SPN_ID }} \
            -p vnetName=${{ env.VNET_NAME }} \
            -p vnetCidr=${{ env.VNET_CIDR }} \
            -p aksSubnetCidr=${{ env.AKS_SUBNET_CIDR }} \
            -p aksSubnetName=${{ env.AKS_SUBNET_NAME }} \
            -p startIpAddress=${{ env.START_IP_ADRESS }} \
            -p endIpAddress=${{ env.END_IP_ADRESS }} \
            -p appDnsZone=${{ env.APP_DNS_ZONE }} \
            -p acrName=${{ env.ACR_NAME }} \
            -p deployToVNet=${{ env.DEPLOY_TO_VNET }}

      shell: bash

    - name: Azure Logout security hardening
      run: |
          az logout
          az cache purge
          az account clear             
      shell: bash