# This workflow will deploy all the Azure services, including AKS, KV & secrets, MYSQL (eventually with a Firewall rule to allow your workstation IP)
# eventually if DEPLOY_TO_VNET is set to true : also VNet, AKS deployed to VNet, private DNS-Zone, client VM deployed to the VNet

name: Deploy IaC with Azure Bicep

env:
  APP_NAME: petcliaks
  LOCATION: westeurope # francecentral
  RG_KV: rg-iac-kv33 # RG where to deploy KV
  RG_APP: rg-iac-aks-petclinic-mic-srv # RG where to deploy the other Azure services: AKS, ACR, MySQL, etc.
  
  ACR_NAME: acrpetcliaks

  VNET_NAME: vnet-aks
  VNET_CIDR: 172.16.0.0/16
  AKS_SUBNET_CIDR: 172.16.1.0/24
  AKS_SUBNET_NAME: snet-aks

  DNS_PREFIX: appinnojava
  AKS_IDENTITY_NAME: id-aks-cluster-dev-westeurope-101

  START_IP_ADDRESS: 172.16.1.0
  END_IP_ADDRESS: 172.16.1.255
  CLIENT_IP_ADDRESS: 42.42.42.42 #  not used

  MYSQL_SERVER_NAME: petcliaks
  MYSQL_DB_NAME: petclinic
  MYSQL_ADM_USR: mys_adm
  MYSQL_TIME_ZONE: Europe/Paris
  MYSQL_CHARACTER_SET: utf8
  MYSQL_PORT: 3306

  DEPLOY_TO_VNET: false

  KV_NAME: kv-petcliaks33 # The name of the KV, must be UNIQUE. A vault name must be between 3-24 alphanumeric characters
  SET_KV_ACCESS_POLICIES: false # let it to false

  # GIT_CFG_URI: https://github.com/ezYakaEagle442/aks-cfg-srv

  VM_ADMIN_USER_NAME: adm_aks
  
  # https://github.com/Azure/actions-workflow-samples/blob/master/assets/create-secrets-for-GitHub-workflows.md#consume-secrets-in-your-workflow
  # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-using-secrets

  # ==== Secrets ====

  # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions
  # Never use structured data as a secret
  # Structured data can cause secret redaction within logs to fail, because redaction largely relies on finding an exact match for 
  # the specific secret value. For example, do not use a blob of JSON, XML, or YAML (or similar) to encapsulate a secret value, 
  # as this significantly reduces the probability the secrets will be properly redacted. Instead, create individual secrets for each sensitive value.

  SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}

  SPRING_CLOUD_AZURE_KEY_VAULT_ENDPOINT: ${{ secrets.SPRING_CLOUD_AZURE_KEY_VAULT_ENDPOINT }}
  SPRING_CLOUD_AZURE_TENANT_ID: ${{ secrets.SPRING_CLOUD_AZURE_TENANT_ID }}
  
  VM_ADMIN_PASSWORD: ${{ secrets.VM_ADMIN_PASSWORD }}

  SSH_PRV_KEY: ${{ secrets.SSH_PRV_KEY }}
  SSH_PUB_KEY: ${{ secrets.SSH_PUB_KEY }}
  SSH_KEY: aksadm

  # https://learn.microsoft.com/en-us/azure/key-vault/secrets/secrets-best-practices#secrets-rotation
  # Because secrets are sensitive to leakage or exposure, it's important to rotate them often, at least every 60 days. 
  # Expiry date in seconds since 1970-01-01T00:00:00Z. Ex: 1672444800 ==> 31/12/2022'
  SECRET_EXPIRY_DATE: 1703980800 # ==> 31/12/2023

  credentials: ${{ secrets.AZURE_CREDENTIALS }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  # ==== Versions ====
  DEPLOYMENT_VERSION: 2.6.13
  AZ_CLI_VERSION: 2.42.0
  JAVA_VERSION: 11

on:
  workflow_dispatch:

jobs:
 
  call-pre-req-workflow:
    name: Trigger Pre-Req
    uses: ./.github/workflows/deploy-iac-pre-req.yml
    secrets: inherit

  deploy-iac:
    needs: call-pre-req-workflow
    runs-on: ubuntu-latest
            
    steps:
    - name: Login with GHA Runner SP
      uses: azure/login@v1.4.6 # fails https://github.com/marketplace/actions/azure-login
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }} # ${{ env.credentials }}

    - name: Checkout
      uses: actions/checkout@v3 # https://github.com/actions/checkout

    - name: Create AKS cluster
      run: |
          echo "****************************************************************************************"
          echo "*                                                                                      *"
          echo "*                                                                                      *"
          echo "*About to create AKS cluster                                                           *"
          echo "*                                                                                      *"         
          echo "*                                                                                      *"
          echo "****************************************************************************************"

          az deployment group create --name aks-petclinic-main -f iac/bicep/main.bicep -g ${{ env.RG_APP }} \
            -p appName=${{ env.APP_NAME }} \
            -p location=${{ env.LOCATION }} \
            -p kvName=${{ env.KV_NAME }} \
            -p kvRGName=${{ env.RG_KV }} \
            -p publicNetworkAccess=enabled \
            -p startIpAddress=${{ env.START_IP_ADDRESS }} \
            -p endIpAddress=${{ env.END_IP_ADDRESS }} \
            -p clientIPAddress=${{ env.CLIENT_IP_ADDRESS }} \
            -p vnetName=${{ env.VNET_NAME }} \
            -p subnetName=${{ env.AKS_SUBNET_NAME }} \
            -p vnetCidr=${{ env.VNET_CIDR }} \
            -p dnsPrefix=${{ env.DNS_PREFIX }} \
            -p aksIdentityName=${{ env.AKS_IDENTITY_NAME }} \
            -p mySQLServerName=${{ env.MYSQL_SERVER_NAME }} \
            -p mySQLadministratorLogin=${{ env.MYSQL_ADM_USR }} \
            -p mySQLadministratorLoginPassword=${{ env.SPRING_DATASOURCE_PASSWORD }} \
            -p acrName=${{ env.ACR_NAME }} \
            -p sshPublicKey="${{ env.SSH_PUB_KEY }}"
 
      shell: bash

    - name: Whitelist AKS OutboundIP
      run: |
            az config set extension.use_dynamic_install=yes_without_prompt

            echo "About to Whitelist AKS OutboundIP in KV & MySQL"

            var ipRules = aks.outputs.aksOutboundIPs[0]
            var vNetRules = [vnet.properties.subnets[0].id]

            az deployment group create --name aks-kv-mysql-set-ip-rules -f iac/bicep/set-ip-rules.bicep -g ${{ env.RG_APP }} \
              -p appName=${{ env.APP_NAME }} \
              -p location=${{ env.LOCATION }} \
              -p kvName=${{ env.KV_NAME }} \
              -p kvRGName=${{ env.RG_KV }} \
              -p administratorLogin=${{ env.MYSQL_ADM_USR }} \
              -p dbServerName=${{ env.MYSQL_SERVER_NAME }} \
              -p vNetRules=[${{ env.xxx }}] \
              -p ipRules=[${{ env.xxx }}] \
              -p setFwRuleClient=false \
              -p startIpAddress=${{ env.START_IP_ADDRESS }} \
              -p endIpAddress=${{ env.END_IP_ADDRESS }} \
              -p clientIPAddress=${{ env.CLIENT_IP_ADDRESS }}

      shell: bash

    # security hardening for self-hosted agents: https://github.com/marketplace/actions/azure-login
    # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#hardening-for-self-hosted-runners
    # if the runner is self-hosted which is not github provided it is recommended to manually logout at the end of the workflow as shown below.
    - name: Azure Logout security hardening
      run: |
          az logout
          az cache purge
          az account clear
      shell: bash
      
  call-db-init-workflow:
    name: Load Data to DB
    needs: deploy-iac
    uses: ./.github/workflows/sql-load.yml
    secrets: inherit

  call-maven-build-workflow:
    name: Trigger Maven for backend services
    needs: deploy-iac
    uses: ./.github/workflows/maven-build.yml # .github/workflows/maven-build.yml@main ==> references to workflows must be prefixed with format 'owner/repository/' or './' for local workflows
    secrets: inherit # pass all secrets
      # envPAT: ${{ secrets.envPAT }} # pass just this secret

  call-maven-build-ui-workflow:
    name: Trigger Maven for the UI
    needs: deploy-iac
    uses: ./.github/workflows/maven-build-ui.yml
    secrets: inherit

  deploy-apps:
    needs: [call-maven-build-workflow, call-maven-build-ui-workflow]
    runs-on: ubuntu-latest
    steps:

    - name: Login with GHA Runner SP
      uses: azure/login@v1.4.6 # fails https://github.com/marketplace/actions/azure-login
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }} # ${{ env.credentials }}
        
    - name: Checkout
      uses: actions/checkout@v3 # https://github.com/actions/checkout

    - name: Deploy Backend services
      run: |
          # https://docs.github.com/en/actions/using-jobs/defining-outputs-for-jobs
          echo "Checking tag_id output ... : " ${{ needs.call-maven-build-workflow.outputs.tag_id }}
          tag_id=${{ needs.call-maven-build-workflow.outputs.tag_id }}
          echo "Image Build tag ID:"$tag_id

          imageNameAdminServer="${{ env.REGISTRY_URL }}/${{ env.REPOSITORY }}/${{ env.ADMIN_SERVER }}:$tag_id"
          imageNameDiscoveryServer="${{ env.REGISTRY_URL }}/${{ env.REPOSITORY }}/${{ env.DISCOVERY_SERVER }}:$tag_id"
          imageNameConfigServer="${{ env.REGISTRY_URL }}/${{ env.REPOSITORY }}/${{ env.CONFIG_SERVER }}:$tag_id"
         
          imageNameVetsService="${{ env.REGISTRY_URL }}/${{ env.REPOSITORY }}/${{ env.VETS_SERVICE }}:$tag_id"
          imageNameVisitsService="${{ env.REGISTRY_URL }}/${{ env.REPOSITORY }}/${{ env.VISITS_SERVICE }}:$tag_id"
          imageNameCustomersService="${{ env.REGISTRY_URL }}/${{ env.REPOSITORY }}/${{ env.CUSTOMERS_SERVICE }}:$tag_id"

          echo "imageNameConfigServer= " $imageNameConfigServer
          echo "imageNameCustomersService= " $imageNameCustomersService
          echo "imageNameVetsService= " $imageNameVetsService
          echo "imageNameVisitsService= " $imageNameVisitsService

          echo "TODO deploy Apps ..."

      shell: bash

    - name: Deploy UI
      run: |
          echo "Checking tag_id output for the UI ... : " ${{ needs.call-maven-build-ui-workflow.outputs.tag_id }}
          tag_id=${{ needs.call-maven-build-ui-workflow.outputs.tag_id }}
          echo "Image Build tag ID:"$tag_id

          imageNameApiGateway="${{ env.REGISTRY_URL }}/${{ env.REPOSITORY }}/${{ env.API_GATEWAY }}:$tag_id"
          echo "imageNameApiGateway= " $imageNameApiGateway

          echo "About to deploy the UI ..." 
      shell: bash

  call-deploy-apps-svc-workflow:
    name: Trigger App Deployment for the Backend services
    needs: deploy-iac
    uses: ./.github/workflows/deploy-app-svc.yml
    with:
      tag_id: xxx
    secrets: inherit

  call-deploy-ui-workflow:
    name: Trigger UI Deployment
    needs: deploy-iac
    uses: ./.github/workflows/deploy-app-ui.yml
    with:
      tag_id: xxx
    secrets: inherit

  Logout:
    needs: call-deploy-ui-workflow
    runs-on: ubuntu-latest
    steps:    
    - name: Azure Logout security hardening
      run: |
          az logout
          az cache purge
          az account clear
      shell: bash